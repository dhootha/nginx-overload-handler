{"name":"Nginx-overload-handler","body":"### How does the Nginx web server handle web-application overloads?\r\nIt doesn't.\r\nInstead, Nginx just keeps piping requests to the web application and lets\r\nthem deal with overloads. How do web applications handle overloads? They\r\nusually don't.\r\n\r\n### That's a problem.\r\n\r\nnginx-overload-handler is an attempt to solve this problem by (1) having nginx\r\ndetect overloads, (2) alerting web applications of overloads, and (3) implementing\r\ngeneric, default behavior for web applications that enables them to survive\r\noverloads.\r\n\r\n### How is it implemented?\r\nSeveral moving parts:\r\n    (1) A new load balancing module for nginx, upstream_overload.\r\n        See nginx_upstream_overload/README.txt\r\n    (2) An Alert Router receives alerts from upstream_overload (via\r\n        a named pipe) and forwards these alerts to the appropriate\r\n        Bouncer (via Thrift RPC).\r\n        See bouncer/README.txt\r\n    (3) Each Bouncer manages a group of FastCGI worker process that\r\n        implements the web application. When one of those workers, dies\r\n        the Bouncer restarts it. When it receives an alert from the Alert\r\n        Router, it kills one of the workers to help deal with the overload.\r\n        See bouncer/README.txt","tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}